#ifndef HCI_H_
#define HCI_H_

#include <stdint.h>
#include <usbotg_lib/usb_core.h>
#include <usbh_lib/usbh_core.h>
#include <stm32fx/peripherals.h>

typedef enum
{
	HCISTATE_WAIT = 0x80,
	HCISTATE_INIT = 0x00,
	HCISTATE_RESET,
	HCISTATE_READBDADDR,
	HCISTATE_WRITECLASSOFDEV,
	HCISTATE_CHANGELOCALNAME,
	HCISTATE_WRITEEXTENDEDINQUIRYRESPONSE,
	HCISTATE_DELETESTOREDLINKKEY,
	HCISTATE_SETEVENTFILTER,
	HCISTATE_SETEVENTMASK,
	HCISTATE_WRITEINQUIRYMODE,
	HCISTATE_WRITEDEFAULTLINKPOLICYSETTINGS,
	HCISTATE_WRITEPAGETIMEOUT,
	HCISTATE_WRITECONNECTIONACCEPTTIMEOUT,
	HCISTATE_WRITESIMPLEPAIRINGMODE,
	HCISTATE_WRITEINQUIRYSCANACTIVITY,
	HCISTATE_WRITEINQUIRYSCANTYPE,
	HCISTATE_WRITEPAGESCANACTIVITY,
	HCISTATE_WRITEPAGESCANTYPE,
	HCISTATE_WRITESCANENABLE,
	HCISTATE_WRITEDEFAULTERRONEOUSDATAREPORTING,
	HCISTATE_WAITFORUSERTOINITIATECONNECTION,//
	HCISTATE_CREATECONNECTION,
	HCISTATE_READCLOCKOFFSET,
	HCISTATE_CHANGECONNECTIONPACKETTYPE,
	HCISTATE_CONNECTIONREQUEST_SERVICESEARCH,
	HCISTATE_CONFIGUREREQUEST_SERVICESEARCH,
	HCISTATE_CONFIGURESPONSE_SERVICESEARCH,
	HCISTATE_SERVICESEARCH, // 06:00:01:00:0f:35:03:19:01:00:08:00:35:05:0a:00:00:ff:ff:00
	HCISTATE_DISCONNECTREQUEST,
	HCISTATE_AUTHENTICATIONREQUESTED,
	HCISTATE_SETCONNECTIONENCRYPTION,
	HCISTATE_CONNECTIONREQUEST_HIDCONTROL,
	HCISTATE_CONFIGUREREQUEST_HIDCONTROL,
	HCISTATE_CONNECTIONREQUEST_HIDINTERRUPT,
	HCISTATE_CONFIGUREREQUEST_HIDINTERRUPT,
	HCISTATE_SENDDATA,
	HCISTATE_REPORTING,
	HCISTATE_REQUIRERECONNECT,
	HCISTATE_UNRECOVERABLE_ERROR,
}
HCI_State_t;

typedef enum
{
	HCISUBSTATE_NONE = 0x00,
	HCISUBSTATE_PACKETACK = 0x01,
	HCISUBSTATE_COMMANDSTATUS = 0x02,
	HCISUBSTATE_CREATECONNECTION_CONNECTCOMPLETE = 0x04,
	HCISUBSTATE_CREATECONNECTION_ROLECHANGE = 0x08,
	HCISUBSTATE_READCLOCKOFFSET_READCLOCKOFFSETCOMPLETE = 0x04,
	HCISUBSTATE_CHANGECONNECTIONPACKETTYPE_CONNECTIONPACKETTYPECHANGED = 0x04,
	HCISUBSTATE_CHANGECONNECTIONPACKETTYPE_MAXSLOTSCHANGE = 0x08,
	HCISUBSTATE_CONNECTIONREQUEST_SERVICESEARCH_PENDING = 0x04,
	HCISUBSTATE_CONNECTIONREQUEST_SERVICESEARCH_SUCCESS = 0x08,
	HCISUBSTATE_CONFIGUREREQUEST_SERVICESEARCH_SUCCESS = 0x04,
	HCISUBSTATE_CONFIGUREREQUEST_SERVICESEARCH_CONFIGUREREQUEST = 0x08,
	HCISUBSTATE_SENDSTUFF1_SEARCHSERVICEATTRIBUTERESPONSE = 0x04,
	HCISUBSTATE_DISCONNECTREQUEST_DISCONNECTRESPONSE = 0x04,
	HCISUBSTATE_AUTHENTICATIONREQUESTED_LINKKEYREQUEST = 0x04,
	HCISUBSTATE_AUTHENTICATIONREQUESTED_LINKKEYREQUESTREPLY = 0x08,
	HCISUBSTATE_AUTHENTICATIONREQUESTED_LINKKEYREQUESTREPLY_COMMANDCOMPLETE = 0x10,
	HCISUBSTATE_AUTHENTICATIONREQUESTED_LINKSUPERVISIONTIMEOUTCHANGED = 0x20,
	HCISUBSTATE_AUTHENTICATIONREQUESTED_AUTHCOMPLETE = 0x40,
	HCISUBSTATE_SETCONNECTIONENCRYPTION_ENCRYPTCHANGE = 0x04,
	HCISUBSTATE_CONNECTIONREQUEST_HID_LINKKEYREQUEST = 0x04,
	HCISUBSTATE_CONNECTIONREQUEST_HID_LINKKEYREQUESTREPLY = 0x08,
	HCISUBSTATE_CONNECTIONREQUEST_HID_LINKKEYREQUESTREPLY_COMMANDCOMPLETE = 0x10,
	HCISUBSTATE_CONNECTIONREQUEST_HID_CONNECTIONRESPONSEPENDING = 0x20,
	HCISUBSTATE_CONNECTIONREQUEST_HID_CONNECTIONRESPONSESUCCESS = 0x40,
	HCISUBSTATE_CONFIGUREREQUEST_HID_LINKKEYREQUEST = 0x04,
	HCISUBSTATE_CONFIGUREREQUEST_HID_LINKKEYREQUESTREPLY = 0x08,
	HCISUBSTATE_CONFIGUREREQUEST_HID_LINKKEYREQUESTREPLY_COMMANDCOMPLETE = 0x10,
	HCISUBSTATE_CONFIGUREREQUEST_HID_CONFIGURERESPONSE_SUCCESS = 0x20,
	HCISUBSTATE_CONFIGUREREQUEST_HID_CONFIGUREREQUEST = 0x40,
	HCISUBSTATE_CONFIGUREREQUEST_HID_CONFIGUREREQUEST_SUCCESS = 0x80,
}
HCI_SubState_t;

typedef struct
{
	HCI_State_t state;
	HCI_SubState_t substate;
	uint8_t dongle_bdaddr[6];
	uint8_t master_bdaddr[6];
	int8_t retries;
	uint16_t last_cmd;
	uint8_t role;
	uint16_t conn_handle;
	USB_OTG_CORE_HANDLE* usb_core;
	USBH_DEV* usbh_dev;
	USART_TypeDef* uart;
	uint32_t reset_tmr;
}
BTHCI_t;

#define HCI_COMMANDSTATUS_SUCCESS 0

static inline void HCI_Command_Param_Add(uint8_t* allParam, uint8_t* thisParam, size_t sz, size_t* len)
{
	for (int i = 0; i < sz; i++) {
		allParam[*len] = thisParam[i];
		(*len) += 1;
	}
}

void HCI_HandleEvent(BTHCI_t*, uint8_t*);
void HCI_HandleData(BTHCI_t*, uint8_t*);
void HCI_Task(BTHCI_t*);
char HCI_Command(BTHCI_t*, uint16_t, uint8_t*, uint8_t);

#endif
